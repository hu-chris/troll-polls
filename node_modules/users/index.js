var mongoose = require('mongoose'),
bcrypt = require('bcrypt-nodejs');

var mongoDB = process.env.MONGOLAB_URI;
mongoose.connect(mongoDB, {
    useMongoClient: true
});
mongoose.Promise = global.Promise;
var db = mongoose.connection;

db.on('error', console.error.bind(console, 'mongoDB connection error:'))

function toUpper(str) {
    return str.toUpperCase();
}

var Schema = mongoose.Schema;
var userSchema = new Schema({
    username: { type: String, set: toUpper },
    email: { type: String, set: toUpper },
    password: String,
    polls: Array,
    votes: Number
})

userSchema.pre('save', function (next) {
    var user = this;
    bcrypt.hash(user.password, null, null, function (err, hash){
      if (err) {
        return next(err);
      }
      user.password = hash;
      next();
    })
});

userSchema.statics.authenticate = function (username, password, callback) {
    UserModel.findOne({ username: username })
      .exec(function (err, user) {
        if (err) {
          return callback(err)
        } else if (!user) {
          var err = new Error('User not found.');
          err.status = 401;
          return callback(err);
        }
        bcrypt.compare(password, user.password, function (err, result) {
          if (result === true) {
            return callback(null, user);
          } else {
            return callback();
          }
        })
      });
  }


var UserModel = mongoose.model('users', userSchema);

module.exports = UserModel;